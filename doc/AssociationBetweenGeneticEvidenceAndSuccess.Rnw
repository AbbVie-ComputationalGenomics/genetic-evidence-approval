\documentclass{article}

\begin{document}

<<label=packagesAndFunctions, include=FALSE>>=
library(dplyr)
library(ggplot2)
library(tidyr)
library(gdata)
library(ontologyIndex)
library(ontologySimilarity)
library(epitools)
library(cowplot)
library(grid)
library(rstan)
library(biomaRt)
source("../src/MeSHFunctions.R")
source("../src/StatisticalFunctions.R")
source("../src/GeneticFunctions.R")
@

\section{Effect of Genetic Evidence on Test Sets}

<<label=datareadin, include=FALSE>>=
data_folder = "../data"
# Gene-trait associations from GWAS and OMIM genetic evidence (current and Nelson)
gene_trait_association_table0 <- read.delim(paste0(data_folder, "/gene_trait_assoc.tsv"), stringsAsFactors = FALSE)
gene_trait_association_table_n <- read.delim(paste0(data_folder, "/Standardized_Nelson_Associations.tsv"), stringsAsFactors = FALSE)
# Drug target-indication links with success (with my maps and maps standardized to n et al.).
target_indication_table <- read.delim(paste0(data_folder, "/target_indication.tsv"), stringsAsFactors = FALSE)
target_indication_table_nmsh <- read.delim(paste0(data_folder, "/target_indication_nmsh.tsv"), stringsAsFactors = FALSE)
# MeSH ontology data
mesh_names <- read.delim(paste0(data_folder, "/MeSH_desc_2017.tsv"), stringsAsFactors = FALSE)
mesh_tree <- read.delim(paste0(data_folder, "/MeSH_desctree_2017.tsv"), stringsAsFactors = FALSE)
# Manual assignments from Nelson et al.
manual_assignments <- read.xls(paste0(data_folder, "/ng.3314-S9.xlsx"), stringsAsFactors=FALSE)
# Nelson et al. supplementary tables
# Table of genetic associations from Nelson supplementary material
table2_nelson <- read.table(
  url("https://images.nature.com/full/nature-assets/ng/journal/v47/n8/extref/ng.3314-S12.txt"),
  quote="\"", sep="\t", header=TRUE, stringsAsFactors = FALSE)
#Table of drugs from Nelson supplementary material
table3_nelson <- read.table(
  url("https://images.nature.com/full/nature-assets/ng/journal/v47/n8/extref/ng.3314-S13.txt"),
  quote="\"", sep="\t", header=TRUE, stringsAsFactors = FALSE)
#Relative similarities of MSH term pairs
table4_nelson <- read.table(
  url("https://images.nature.com/full/nature-assets/ng/journal/v47/n8/extref/ng.3314-S14.txt"),
  quote="\"", sep="\t", header=TRUE, row.names=1, stringsAsFactors = FALSE, check.names=FALSE)
table4_nelson <- as.matrix(table4_nelson)
rownames(table4_nelson) <- gsub("\\\\", "", rownames(table4_nelson))
colnames(table4_nelson) <- gsub("\\\\", "", colnames(table4_nelson))
# gene properties, used in statistical models
gene_properties <- read.delim(paste0(data_folder,"/Target_Properties.tsv"), stringsAsFactors = FALSE)
@ 

<<label = RemoveXMHC, include=FALSE>>=
xMHC_ensembl <- get_xMHC_genes()
gene_trait_association_table <- filter(gene_trait_association_table0, !ensembl_id %in% xMHC_ensembl)
target_indication_table <-  filter(target_indication_table, !ensembl_id %in% xMHC_ensembl) # this actually was already filtered to remove these genes.
@

<<label=TraitIndicationSimilarity, include=FALSE>>=
# For complete current dataset
average_similarity <- construct_MeSH_similarity(unique(target_indication_table$MSH), 
                                                mesh_names, mesh_tree, manual_assignments = manual_assignments, 
                                                trait_terms = unique(gene_trait_association_table$MSH))
# For Nelson et al. associations + current Pharmaprojects
average_similarity_clinical <- construct_MeSH_similarity(unique(target_indication_table_nmsh$MSH), mesh_names, mesh_tree, manual_assignments = manual_assignments, trait_terms = unique(gene_trait_association_table_n$MSH))
@

<<ReplicationResultsOnFullDataset, include=FALSE>>=
# Chosen to match Nelson value 0.7 from linear model of similarities.
new_replication_similarity_cutoff <- 0.7268653

# Complete current
table1_complete <- replicate_table1(target_indication_table = target_indication_table, association_table = gene_trait_association_table, MSH_similarity = average_similarity, similarity_cutoff = new_replication_similarity_cutoff, ngene_cutoff = 5, gene_col_name = "ensembl_id", source_names=c(gwas="GWAS Catalog", omim="OMIM", any="GWAS Catalog & OMIM"))
@

<<label=ReplicationNewGenetic, include=FALSE>>=
new_associations <- filter(gene_trait_association_table, (Source== "GWAS:A" & first_added > as.Date("2013-05-21")) |
                           (Source == "OMIM" & first_added > as.Date("2013-10-03")))

# Well-studied MeSH are being obtained from the full dataset.
well_studied <- get_well_studied_MSH(target_indication_table = target_indication_table, association_table = gene_trait_association_table, MSH_similarity = average_similarity, similarity_cutoff =new_replication_similarity_cutoff, ngene_cutoff = 5, gene_col_name = "ensembl_id")

# New Genetic Test Set
table1_new_genetic  <- replicate_table1(association_table = new_associations, target_indication_table = target_indication_table, MSH_similarity = average_similarity, similarity_cutoff = new_replication_similarity_cutoff, ngene_cutoff = 5, gene_col_name = "ensembl_id", MSH_to_include = well_studied)
@

<<label=ReplicationNewClincial, include=FALSE>>=
well_studied_clinical <- get_well_studied_MSH(target_indication_table = target_indication_table_nmsh, association_table = gene_trait_association_table_n, MSH_similarity = average_similarity_clinical, similarity_cutoff =new_replication_similarity_cutoff, ngene_cutoff = 5, gene_col_name = "ensembl_id")

# New clinical test set
table1_new_clinical <- replicate_table1(association_table = gene_trait_association_table_n, target_indication_table = target_indication_table_nmsh %>% filter(NelsonStatus %in% c("Absent", "Unused")), MSH_similarity=average_similarity_clinical, similarity_cutoff = new_replication_similarity_cutoff, ngene_cutoff = 5, gene_col_name = "ensembl_id", MSH_to_include = well_studied_clinical)
@

<<label=ReplicationClinicalProgression, include=FALSE>>=
# Clinical progression test set.
progression_table <- generate_table1_progression(target_indication_table = target_indication_table_nmsh, 
                                                 association_table = gene_trait_association_table_n, 
                                                 MSH_similarity = average_similarity_clinical, 
                                                 similarity_cutoff = new_replication_similarity_cutoff)
@

<<label=OriginalNelsonEtAlAnalysis, incldue=FALSE>>=
table1_original <- replicate_table1(target_indication_table = table3_nelson, association_table = table2_nelson, MSH_similarity = table4_nelson, similarity_cutoff = 0.7, ngene_cutoff = 5, gene_col_name = "Gene")
@

<<label=ResultsFigure, include=FALSE, cache=FALSE>>=
table1_list <- list(
                    "New\nClinical"=table1_new_clinical,
                    "Clinical\nProgression"=progression_table,
                    "New\nGenetic"=table1_new_genetic,
                    "Complete\nCurrent"=table1_complete,
                    "2013 Data"=table1_original)

collected_results_plot <- make_collected_results_plot(table1_list, 
                                                      analysis_classification_vec = c("New\nClinical"="New",
                                                                   "2013 Data"="Old",
                                                                   "New\nGenetic"="New",
                                                                   "Clinical\nProgression"="Pro",
                                                                   "Complete\nCurrent"="Mix"))
@

<<label=CountFigure, include=FALSE, cache=FALSE>>=
pharmaprojects_count <- target_indication_table_nmsh %>% 
  mutate(StatusCurrent=case_when(lApprovedUS.EU ~ "Approved",
                                 grepl("linical", Phase.Latest) ~ Phase.Latest,
                                 TRUE ~ "Unused")) %>%
  group_by(StatusCurrent, NelsonStatus) %>% 
  dplyr::summarise(N=length(MSH)) %>% 
  mutate(Set = case_when(StatusCurrent=="Unused"~"Unknown Status", 
                         grepl("linical", NelsonStatus)~"Nelson Clinical\nClinical Progression",
                         NelsonStatus=="Approved"~"Nelson Approved",
                         TRUE~"Nelson Unused\nNew Clinical"), Source="Pharmaprojects") %>% 
  group_by(Set) %>% 
  dplyr::summarise(N=sum(N), Source=unique(Source))

OMIM_by_date_count <- OMIM_filter(gene_trait_association_table) %>% 
  mutate(PostDownload=first_added > as.Date("2013-10-03"), Set=case_when(is.na(PostDownload)~"Unknown Date",
                                                                         PostDownload~"New Genetic",
                                                                         TRUE~"Pre Oct 2013")) %>%
  group_by(Set) %>% dplyr::summarise(N=length(unique(paste(MSH, ensembl_id))), Source=unique(Source))

GWAS_by_date_count <- gwas_filter(gene_trait_association_table) %>% 
  mutate(PostDownload=first_added > as.Date("2013-05-21"), Set=case_when(is.na(PostDownload)~"Unknown Date",
                                                                         PostDownload~"New Genetic",
                                                                         TRUE~"Pre May 2013")) %>%
  group_by(Set) %>% dplyr::summarise(N=length(unique(paste(MSH, ensembl_id))), Source=unique(Source))

combined_counts <- bind_rows(OMIM_by_date_count , GWAS_by_date_count, pharmaprojects_count) %>%
  mutate(Col=ifelse(Set %in% c("Pre May 2013", "Pre Oct 2013", "Nelson Approved"), "Training", ifelse(grepl("Unknown", Set), "Unlabelled", ifelse(grepl("New", Set), "New", "Progression"))))

lab_size = 2.5

count_plot <- ggplot(combined_counts) + aes(x = Source, y = N, fill = Col) + geom_bar(stat = "identity") + 
  theme(legend.position=c(0.35,0.8), text = element_text(size=9)) + 
  labs(x="", y="Number of Target-MeSH Pairs", fill="Subset Type") + 
  scale_fill_manual(values=c(hcl(h = seq(15, 375, length = 4), l = 65, c = 100)[c(3,2,1)], "gray")) +
  geom_text(aes(label=ifelse(grepl("Unknown Date|Approved", Set) | (Set=="New Genetic" & Source=="OMIM"), "", Set)), position = "stack", vjust=2, size=lab_size) +
  geom_text(aes(label=ifelse(grepl("Pre|Status", Set) | (Set=="New Genetic" & Source=="GWAS"), paste0("N"=N), "")), position = "stack", vjust=4, size=lab_size) +
  geom_text(aes(label=ifelse(grepl("New Clinical|Prog", Set), paste0("N"=N), "")), position = "stack", vjust=8, size=lab_size) +
  geom_text(aes(label=ifelse(grepl("Approved", Set), paste(Set, N), "")), position = "stack", vjust=2.5, size=lab_size) +
  geom_text(aes(label=ifelse((grepl("New Genetic", Set) & Source=="OMIM"), paste(Set, N), "")), position = "stack", vjust=1.5, size=lab_size) +
  annotate("text", x=2, y=5500, label=paste0("Unknown Date ", combined_counts %>% filter(Set=="Unknown Date") %>% pull(N)), size=lab_size)
@

\begin{figure}
<<label=HeldOutTestSets, echo=FALSE, results='asis', fig.width=10, fig.height=5>>=
plot_grid(count_plot, collected_results_plot, labels = c("A", "B"))
@
\caption{Estimated effect of human genetic evidence on drug success on updated dataset and held out test sets.  A: Partitioning Pharmaprojects, OMIM, and GWAS catalog into training data available to Nelson et al. 2015 and held out test sets.  We use test set Clinical Progression to determine whether drug target-indication pairs with genetic evidence were more likely to advance to the next clinical phase from 2013-2018 than those without.  B:  Comparison of our estimates of the effect of genetic evidence on drug target-indication pair success to values reported by Nelson et al. 2015 in held out test sets (New Clinical, New Genetic), the Clinical Progression test set, and in the full updated dataset (Complete Current).}\label{fig:testsets}
\end{figure}

\section{Statistical Models}

<<label=DefiningDatasetForGenePropertyAnalysis, include=FALSE, cache=TRUE>>=
# Our statistical model only operates on target-indication pairs with known success or failure (not those currently active without
# known failures)
target_indication_table_known_status <- filter(target_indication_table, Inactive | lApprovedUS.EU)
@

<<label=DefaultPriorParameterValues, include=FALSE, cache=TRUE>>=
sigmab=2
mualpha=-2.2
sigmaalpha=0.75

ncore = 4
@

<<label=RunningStanGWAS, include=FALSE, eval=FALSE>>=
stan_gwas <- run_stan(target_indication_table = target_indication_table_known_status, association_table = gene_trait_association_table, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = 2, filter_list=list(gwas = gwas_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/gwas.rds", cores = ncore)
@

<<label=RunningStanOMIM, include=FALSE, eval=FALSE>>=
stan_omim <- run_stan(target_indication_table = target_indication_table_known_status, association_table = gene_trait_association_table, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = 2, filter_list=list(omim = OMIM_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/omim.rds", cores=ncore)
@

<<label=RunningStanGWASDel, include=FALSE, eval=FALSE>>=
del_filter <- function(gene_trait_association_table) {
  filter(gene_trait_association_table, R2 >= 0.9, Deleterious %in% c("MODERATE", "HIGH"))
}

stan_del <- run_stan(target_indication_table = target_indication_table_known_status, association_table = gene_trait_association_table, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = 2, filter_list=list(del = del_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/del.rds", cores=ncore)
@

<<label=RunningStanGWAS2013, include=FALSE, eval=FALSE>>=
stan_gwas_2013 <- run_stan(target_indication_table = target_indication_table_known_status, association_table = new_associations, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = 2, filter_list=list(gwas = gwas_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/gwas_new.rds", cores=ncore)
@

<<label=RunningStanOMIM2013, include=FALSE, eval=FALSE>>=
stan_omim_2013 <- run_stan(target_indication_table = target_indication_table_known_status, association_table = new_associations, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = 2, filter_list=list(omim = OMIM_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/omim_new.rds", cores=ncore)
@

<<label=RunningStanGWASDel2013, include=FALSE, eval=FALSE>>=
stan_del_2013 <- run_stan(target_indication_table = target_indication_table_known_status, association_table = new_associations, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = 2, filter_list=list(del = del_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/del_new.rds", cores=ncore)
@

<<label=RunningStanBoth, include=FALSE, eval=FALSE>>=
stan_both <- run_stan(target_indication_table = target_indication_table_known_status, association_table = gene_trait_association_table, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = rep(2,2), filter_list=list(gwas=gwas_filter, omim=OMIM_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/both.rds", cores=ncore)
@

<<label=RunningStanBoth2013, include=FALSE,  eval=FALSE>>=
stan_both_2013 <- run_stan(target_indication_table = target_indication_table_known_status, association_table = new_associations, MSH_similarity = average_similarity, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, pg = c(RVIS=2, Time=4), pe = rep(2,2), filter_list=list(gwas=gwas_filter, omim=OMIM_filter), sigmab=sigmab, mualpha=mualpha, sigmaalpha=sigmaalpha, save_file="../results/both_new.rds", cores=ncore)
@

<<label=LoadingStanFitObjects, include=FALSE, eval=TRUE>>=
stan_gwas <- readRDS(file = "../results/gwas.rds")
stan_omim <- readRDS(file = "../results/omim.rds")
stan_del <- readRDS(file = "../results/del.rds")
stan_both <- readRDS(file = "../results/both.rds")

stan_gwas_2013 <- readRDS(file = "../results/gwas_new.rds")
stan_omim_2013 <- readRDS(file = "../results/omim_new.rds")
stan_del_2013 <- readRDS(file = "../results/del_new.rds")
stan_both_2013 <- readRDS(file = "../results/both_new.rds")
@

<<label=ModelFitPlotChunk, include=FALSE, eval=TRUE>>=
similarities <- seq(0, 1, 0.01)
prediction_df_gwas <- do.call(generate_prediction_df, c(stan_gwas, list(similarities=seq(0,1,0.01)))) %>% mutate(Analysis="Complete Current", Source="GWAS")
prediction_df_omim <- do.call(generate_prediction_df, c(stan_omim, list(similarities=seq(0,1,0.01)))) %>% mutate(Analysis="Complete Current", Source="OMIM")
prediction_df_del <- do.call(generate_prediction_df, c(stan_del, list(similarities=seq(0,1,0.01)))) %>% mutate(Analysis="Complete Current", Source="GWAS High/Moderate Deleterious")
prediction_df_gwas2013 <- do.call(generate_prediction_df, c(stan_gwas_2013, list(similarities=seq(0,1,0.01)))) %>% mutate(Analysis="New Genetic", Source="GWAS")
prediction_df_omim2013 <- do.call(generate_prediction_df, c(stan_omim_2013, list(similarities=seq(0,1,0.01)))) %>% mutate(Analysis="New Genetic", Source="OMIM")
prediction_df_del2013 <- do.call(generate_prediction_df, c(stan_del_2013, list(similarities=seq(0,1,0.01)))) %>% mutate(Analysis="New Genetic", Source="GWAS High/Moderate Deleterious")

combined_model_fits <- rbind(prediction_df_gwas, prediction_df_omim, prediction_df_del, prediction_df_gwas2013, prediction_df_omim2013, prediction_df_del2013)

combined_model_fit_plot <- ggplot(data = combined_model_fits) + 
  geom_line(aes(x=Similarity, y=Median, color=Source, linetype=Source)) + 
  facet_wrap(~Analysis) + 
  geom_ribbon(aes(x=Similarity, ymin=Lower, ymax=Upper, fill=Source), alpha=0.1) + 
  scale_y_log10(breaks=c(0.25,0.5,1,2,4,8,16)) + 
  labs(y="Odds ratio of approval for target-indication pair\nwith genetic evidence", x="Trait-Indication Similarity") + 
 theme(legend.position = c(0.2, 0.8))
@

\begin{figure}
  <<modelingfigmain, echo=FALSE, results='asis', fig.width=10, fig.height=5>>=
combined_model_fit_plot + background_grid()
  @
\caption{Estimated odds ratio of drug target-indication pair approval given genetic evidence as a function of similarity between drug indication and the most similar associated trait. Left: All genetic associations.  Right: Only genetic associations reported after 2013 download.  Posterior median and 95\% credible interval from Bayesian logistic regression.}\label{fig:statsmain}
\end{figure}

<<label=GeneratingInputForShinyAppNoSlurm, include=FALSE, cache=FALSE, eval=FALSE>>=
coding_genes <- scan(file = "../data/ensembl_protein_coding.txt", what="character", sep="\n")
disease_ui <- filter(mesh_tree, (substr(TreeNumber, 1, 1)=="C" | substr(TreeNumber, 1, 3)=="F03")) %>% pull(UI) %>% unique()
animal_ui <- filter(mesh_tree, substr(TreeNumber, 1, 3)=="C22") %>% pull(UI)
human_disease_ui <- setdiff(disease_ui, animal_ui)
disease_name <- filter(mesh_names, UI %in% human_disease_ui, Preferred=="Y") %>% pull(Name)
stan_res_list <- list(gwas = stan_gwas, omim = stan_omim, both = stan_both)

associated_genes <- intersect(unique(gene_trait_association_table$ensembl_id), coding_genes)
ngenes <- length(associated_genes)

pred_res <- vector("list", length(stan_res_list))

for (i in 1:length(stan_res_list)) {
  pred_res[[i]] <- cbind(predict_gene_mesh(ensembl_ids = associated_genes, mesh_terms = disease_name, association_table = gene_trait_association_table, manual_assignments = manual_assignments, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, stan_res= stan_res_list[[i]], default_time = 13903.5, conf = 0.95, cutoff=0.5), data.frame(Model=names(stan_res_list)[i]))
}

output_for_app <- bind_rows(pred_res) %>% filter(!is.na(OMIMSimilarity) | !is.na(GWASSimilarity))

saveRDS(output_for_app, file = "../results/ShinyAppPrecomputed.rds")
@

<<label=GeneratingInputForShinyApp, include=FALSE, cache=FALSE, eval=TRUE>>=
library(rslurm)

coding_genes <- scan(file = "../data/ensembl_protein_coding.txt", what="character", sep="\n")
disease_ui <- filter(mesh_tree, (substr(TreeNumber, 1, 1)=="C" | substr(TreeNumber, 1, 3)=="F03")) %>% pull(UI) %>% unique()
animal_ui <- filter(mesh_tree, substr(TreeNumber, 1, 3)=="C22") %>% pull(UI)
human_disease_ui <- setdiff(disease_ui, animal_ui)
disease_name <- filter(mesh_names, UI %in% human_disease_ui, Preferred=="Y") %>% pull(Name)
stan_res_list <- list(gwas = stan_gwas, omim = stan_omim, both = stan_both)

nnode <- 2
ntasks <- nnode * 20

associated_genes <- intersect(unique(gene_trait_association_table0$ensembl_id), coding_genes)
ngenes <- length(associated_genes)
genes_per_task <- ceiling(ngenes / ntasks)
gene_df <- data.frame(gene_start = seq(1, ngenes, genes_per_task)) %>% mutate(gene_end = pmin(gene_start + (genes_per_task - 1), ngenes))
params <- cbind(bind_rows(rep(list(gene_df),3)), stan_res_ind = rep(1:3, each=nrow(gene_df)))

predict_gene_mesh_for_slurm <- function(gene_start, gene_end, stan_res_ind) {
  source("/home/eaking/genetic-evidence-drug-success/src/MeSHFunctions.R")
  source("/home/eaking/genetic-evidence-drug-success/src/StatisticalFunctions.R")
  res <- cbind(predict_gene_mesh(ensembl_ids = associated_genes[gene_start:gene_end], mesh_terms = disease_name, association_table = gene_trait_association_table0, manual_assignments = manual_assignments, mesh_names = mesh_names, mesh_tree = mesh_tree, gene_table = gene_properties, stan_res= stan_res_list[[stan_res_ind]], default_time = 13903.5, conf = 0.95, cutoff=0.5), data.frame(Model=names(stan_res_list)[stan_res_ind]))
  return(res)
}

sjob_rshiny <- slurm_apply(f = predict_gene_mesh_for_slurm, params = params,
                    nodes = 2, cpus_per_node = 20, submit =TRUE, add_objects = c("associated_genes", "disease_name", "gene_trait_association_table0", "manual_assignments", "mesh_names", "mesh_tree", "gene_properties", "stan_res_list"), slurm_options = list("tasks-per-node"=20), jobname = "ShinyAppInput")

output_for_app <- get_slurm_out(sjob_rshiny)
cleanup_files(sjob_rshiny)
              
# Some rows are unneeded because they have OMIM genetic evidence for GWAS model or vice versa

output_for_app <- bind_rows(output_for_app) %>% filter(!is.na(OMIMSimilarity) | !is.na(GWASSimilarity))

saveRDS(output_for_app, file = "../results/ShinyAppPrecomputed.rds")
@

\end{document}
